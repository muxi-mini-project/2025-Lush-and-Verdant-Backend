// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\JRH\Desktop\2025-Lush-and-Verdant-Backend\service\user.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\JRH\Desktop\2025-Lush-and-Verdant-Backend\service\user.go -destination=C:\Users\JRH\Desktop\2025-Lush-and-Verdant-Backend\mocks\mock_user.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockUserService) Cancel(arg0 *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockUserServiceMockRecorder) Cancel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockUserService)(nil).Cancel), arg0)
}

// ForForAlt mocks base method.
func (m *MockUserService) ForForAlt(arg0 *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForForAlt", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForForAlt indicates an expected call of ForForAlt.
func (mr *MockUserServiceMockRecorder) ForForAlt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForForAlt", reflect.TypeOf((*MockUserService)(nil).ForForAlt), arg0)
}

// SendEmail mocks base method.
func (m *MockUserService) SendEmail(arg0 *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockUserServiceMockRecorder) SendEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockUserService)(nil).SendEmail), arg0)
}

// UserLogin mocks base method.
func (m *MockUserService) UserLogin(arg0 *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserServiceMockRecorder) UserLogin(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserService)(nil).UserLogin), arg0)
}

// UserRegister mocks base method.
func (m *MockUserService) UserRegister(arg0 *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRegister", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockUserServiceMockRecorder) UserRegister(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockUserService)(nil).UserRegister), arg0)
}

// VisitorLogin mocks base method.
func (m *MockUserService) VisitorLogin(arg0 *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VisitorLogin", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VisitorLogin indicates an expected call of VisitorLogin.
func (mr *MockUserServiceMockRecorder) VisitorLogin(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VisitorLogin", reflect.TypeOf((*MockUserService)(nil).VisitorLogin), arg0)
}
