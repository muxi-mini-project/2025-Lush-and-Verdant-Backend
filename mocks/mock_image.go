// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\JRH\Desktop\2025-Lush-and-Verdant-Backend\service\image.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\JRH\Desktop\2025-Lush-and-Verdant-Backend\service\image.go -destination=C:\Users\JRH\Desktop\2025-Lush-and-Verdant-Backend\mocks\mock_image.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	model "2025-Lush-and-Verdant-Backend/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockImageService is a mock of ImageService interface.
type MockImageService struct {
	ctrl     *gomock.Controller
	recorder *MockImageServiceMockRecorder
	isgomock struct{}
}

// MockImageServiceMockRecorder is the mock recorder for MockImageService.
type MockImageServiceMockRecorder struct {
	mock *MockImageService
}

// NewMockImageService creates a new mock instance.
func NewMockImageService(ctrl *gomock.Controller) *MockImageService {
	mock := &MockImageService{ctrl: ctrl}
	mock.recorder = &MockImageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageService) EXPECT() *MockImageServiceMockRecorder {
	return m.recorder
}

// GetGroupAllImage mocks base method.
func (m *MockImageService) GetGroupAllImage(group *model.Group) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupAllImage", group)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupAllImage indicates an expected call of GetGroupAllImage.
func (mr *MockImageServiceMockRecorder) GetGroupAllImage(group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupAllImage", reflect.TypeOf((*MockImageService)(nil).GetGroupAllImage), group)
}

// GetGroupImage mocks base method.
func (m *MockImageService) GetGroupImage(group *model.Group) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupImage", group)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupImage indicates an expected call of GetGroupImage.
func (mr *MockImageServiceMockRecorder) GetGroupImage(group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupImage", reflect.TypeOf((*MockImageService)(nil).GetGroupImage), group)
}

// GetToken mocks base method.
func (m *MockImageService) GetToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockImageServiceMockRecorder) GetToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockImageService)(nil).GetToken))
}

// GetUserAllImage mocks base method.
func (m *MockImageService) GetUserAllImage(user *model.User) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAllImage", user)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAllImage indicates an expected call of GetUserAllImage.
func (mr *MockImageServiceMockRecorder) GetUserAllImage(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAllImage", reflect.TypeOf((*MockImageService)(nil).GetUserAllImage), user)
}

// GetUserImage mocks base method.
func (m *MockImageService) GetUserImage(user *model.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserImage", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserImage indicates an expected call of GetUserImage.
func (mr *MockImageServiceMockRecorder) GetUserImage(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserImage", reflect.TypeOf((*MockImageService)(nil).GetUserImage), user)
}

// UpdateGroupImage mocks base method.
func (m *MockImageService) UpdateGroupImage(image *model.GroupImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupImage", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroupImage indicates an expected call of UpdateGroupImage.
func (mr *MockImageServiceMockRecorder) UpdateGroupImage(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupImage", reflect.TypeOf((*MockImageService)(nil).UpdateGroupImage), image)
}

// UpdateUserImage mocks base method.
func (m *MockImageService) UpdateUserImage(image *model.UserImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserImage", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserImage indicates an expected call of UpdateUserImage.
func (mr *MockImageServiceMockRecorder) UpdateUserImage(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserImage", reflect.TypeOf((*MockImageService)(nil).UpdateUserImage), image)
}
