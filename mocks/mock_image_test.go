// Code generated by MockGen. DO NOT EDIT.
// Source: ./image.go

// Package daomock is a generated GoMock package.
package mock

import (
	model "2025-Lush-and-Verdant-Backend/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImageDAO is a mock of ImageDAO interface.
type MockImageDAO struct {
	ctrl     *gomock.Controller
	recorder *MockImageDAOMockRecorder
}

// MockImageDAOMockRecorder is the mock recorder for MockImageDAO.
type MockImageDAOMockRecorder struct {
	mock *MockImageDAO
}

// NewMockImageDAO creates a new mock instance.
func NewMockImageDAO(ctrl *gomock.Controller) *MockImageDAO {
	mock := &MockImageDAO{ctrl: ctrl}
	mock.recorder = &MockImageDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageDAO) EXPECT() *MockImageDAOMockRecorder {
	return m.recorder
}

// CreateGroupImage mocks base method.
func (m *MockImageDAO) CreateGroupImage(image *model.GroupImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupImage", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroupImage indicates an expected call of CreateGroupImage.
func (mr *MockImageDAOMockRecorder) CreateGroupImage(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupImage", reflect.TypeOf((*MockImageDAO)(nil).CreateGroupImage), image)
}

// CreateUserImage mocks base method.
func (m *MockImageDAO) CreateUserImage(image *model.UserImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserImage", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserImage indicates an expected call of CreateUserImage.
func (mr *MockImageDAOMockRecorder) CreateUserImage(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserImage", reflect.TypeOf((*MockImageDAO)(nil).CreateUserImage), image)
}

// GetGroupAllImage mocks base method.
func (m *MockImageDAO) GetGroupAllImage(group *model.Group) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupAllImage", group)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupAllImage indicates an expected call of GetGroupAllImage.
func (mr *MockImageDAOMockRecorder) GetGroupAllImage(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupAllImage", reflect.TypeOf((*MockImageDAO)(nil).GetGroupAllImage), group)
}

// GetGroupImage mocks base method.
func (m *MockImageDAO) GetGroupImage(group *model.Group) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupImage", group)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupImage indicates an expected call of GetGroupImage.
func (mr *MockImageDAOMockRecorder) GetGroupImage(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupImage", reflect.TypeOf((*MockImageDAO)(nil).GetGroupImage), group)
}

// GetUserAllImage mocks base method.
func (m *MockImageDAO) GetUserAllImage(user *model.User) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAllImage", user)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAllImage indicates an expected call of GetUserAllImage.
func (mr *MockImageDAOMockRecorder) GetUserAllImage(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAllImage", reflect.TypeOf((*MockImageDAO)(nil).GetUserAllImage), user)
}

// GetUserImage mocks base method.
func (m *MockImageDAO) GetUserImage(user *model.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserImage", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserImage indicates an expected call of GetUserImage.
func (mr *MockImageDAOMockRecorder) GetUserImage(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserImage", reflect.TypeOf((*MockImageDAO)(nil).GetUserImage), user)
}